import json
import logging
from pathlib import Path
from datetime import datetime

from rarelink_cdm.v2_0_0_dev1.mappings.phenopackets import create_rarelink_phenopacket_mappings
from rarelink.phenopackets import phenopacket_pipeline

# Configure logging
logging.basicConfig(
    level=logging.INFO, 
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def test_rarelink_phenopacket_pipeline(
    input_data_path: Path, 
    output_dir: Path = None, 
    created_by: str = "RareLink CDM Test"
):
    """
    Test the Phenopacket pipeline with RareLink CDM mappings.

    Args:
        input_data_path (Path): Path to the input JSON file with RareLink CDM records
        output_dir (Path, optional): Directory to save generated Phenopacket JSON files
        created_by (str, optional): Creator name for metadata
    """
    # If no output directory specified, create a timestamped directory
    if output_dir is None:
        base_dir = Path.cwd()
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_dir = base_dir / "output" / "phenopackets" / timestamp
    
    # Ensure output directory exists
    output_dir.mkdir(parents=True, exist_ok=True)

    try:
        # Read the input data
        with open(input_data_path, 'r') as f:
            input_data = json.load(f)
        
        # Validate input data
        if not isinstance(input_data, list):
            raise ValueError("Input data must be a list of RareLink CDM records")
        
        # Get combined mappings
        mapping_configs = create_rarelink_phenopacket_mappings()

        logger.info(f"Processing {len(input_data)} RareLink CDM records")
        logger.info(f"Output directory: {output_dir}")

        # Run the Phenopacket pipeline
        phenopacket_pipeline(
            input_data=input_data, 
            output_dir=str(output_dir), 
            created_by=created_by,
            mapping_configs=mapping_configs
        )

        logger.info("Phenopacket pipeline completed successfully")

    except Exception as e:
        logger.error(f"Error in Phenopacket pipeline: {e}")
        raise

def main():
    """
    Main function to run the Phenopacket pipeline test.
    """
    # Replace this with the path to your RareLink CDM JSON file
    input_data_path = Path("/Users/adam/Documents/git/rarelink/res/RareLink_Berlin-linkml-records-1.json")
    
    # Run the pipeline test
    test_rarelink_phenopacket_pipeline(
        input_data_path=input_data_path,
        created_by="RareLink CDM Pipeline Test"
    )

if __name__ == "__main__":
    main()