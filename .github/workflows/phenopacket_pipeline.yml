name: Phenopacket Pipeline Test

on:
  push:
    branches: [ main, master, dev ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  test-phenopacket-pipeline:
    name: Test Phenopacket Pipeline
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pytest pytest-cov
      
      # Install the phenopacket-tools CLI for validation
      - name: Install phenopacket-tools
        run: |
          mkdir -p $HOME/bin
          wget -q -O $HOME/bin/phenopacket-tools https://github.com/phenopackets/phenopacket-tools/releases/download/v1.0.0/phenopacket-tools-cli-1.0.0
          chmod +x $HOME/bin/phenopacket-tools
          echo "$HOME/bin" >> $GITHUB_PATH
      
      # Create required environment variables
      - name: Create environment file
        run: |
          echo "BIOPORTAL_API_TOKEN=${{ secrets.BIOPORTAL_API_KEY }}" > .env
          echo "REDCAP_API_TOKEN=testtoken12345678901234567890123456" >> .env
          echo "REDCAP_URL=https://example.com/api/" >> .env
          echo "REDCAP_PROJECT_ID=12345" >> .env
          echo "REDCAP_PROJECT_NAME=Test Project" >> .env
          echo "CREATED_BY=GitHub Actions" >> .env
      
      # Copy test data to a known location if needed
      - name: Setup test data
        run: |
          mkdir -p test_output
      
      # Run unit tests for the phenopackets module
      - name: Run phenopackets module tests
        run: |
          pytest tests/phenopackets/ -v
      
      # Run the phenopacket pipeline on test data using actual files
      - name: Run phenopacket pipeline
        run: |
          python -c '
          import json
          import os
          import logging
          import importlib.util
          from rarelink.phenopackets.pipeline import phenopacket_pipeline

          # Set up logging
          logging.basicConfig(level=logging.DEBUG)

          # Load the actual test data from the specified file
          with open("tests/phenopackets/test_data/sample_records_rarelink_cdm_1.json", "r") as f:
              test_records = json.load(f)

          # Import the actual mapping config
          spec = importlib.util.spec_from_file_location(
              "mapping_config", 
              "src/rarelink_cdm/v2_0_0_dev1/mappings/phenopackets/combined.py"
          )
          module = importlib.util.module_from_spec(spec)
          spec.loader.exec_module(module)
          
          # Get the mapping_configs from the imported module
          mapping_configs = module.mapping_configs

          # Run pipeline
          phenopackets = phenopacket_pipeline(
              input_data=test_records,
              output_dir="test_output",
              created_by="GitHub Actions",
              mapping_configs=mapping_configs,
              timeout=60,
              debug=True
          )

          # Verify results
          with open("test_output/pipeline_results.txt", "w") as f:
              f.write(f"Created {len(phenopackets)} phenopackets\n")
              for pp in phenopackets:
                  f.write(f"- Phenopacket ID: {pp.id}\n")
                  f.write(f"  Subject ID: {pp.subject.id}\n")
                  f.write(f"  Diseases: {len(pp.diseases)}\n")
                  f.write(f"  Features: {len(pp.phenotypic_features)}\n")
          '
      
      # Validate generated phenopackets
      - name: Validate phenopackets
        run: |
          for file in test_output/*.json; do
            echo "Validating $file"
            phenopacket-tools validate "$file" || echo "Validation failed for $file but continuing"
          done
          
          # If validation fails, we still want to see the output
          echo "Pipeline results:"
          cat test_output/pipeline_results.txt
          
          # Display first phenopacket
          FIRST_PP=$(ls test_output/*.json | head -n 1)
          if [ -n "$FIRST_PP" ]; then
            echo "Content of first generated phenopacket:"
            cat "$FIRST_PP"
          else
            echo "No phenopackets were generated"
          fi
      
      # Upload phenopackets as artifacts
      - name: Upload phenopackets as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: phenopackets
          path: test_output/
          retention-days: 7

      # Run integration tests 
      - name: Run integration tests
        run: |
          pytest tests/integration/ -v || echo "Integration tests failed but continuing"